@model IEnumerable<Ex2.Models.Hero>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/d3")

<head>
    <style>
        .arc text {
            font: 10px sans-serif;
            text-anchor: middle;
        }

        .arc path {
            stroke: #fff;
        }
    </style>
</head>

<script type="text/javascript">
    $(document).ready(function () {
        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height"),
            radius = Math.min(width, height) / 2,
            g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var color = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

        var pie = d3.pie()
            .sort(null)
            .value(function (d) { return d.value; });

        var path = d3.arc()
            .outerRadius(radius - 10)
            .innerRadius(0);

        var label = d3.arc()
            .outerRadius(radius - 40)
            .innerRadius(radius - 40);

        var rolesArray = ['Attack', 'Defender', 'Tank', 'Support'];

        d3.json("/Heroes/IndexData", function (data) {
            var groupByHeroRole = {};

            data.forEach(function (d) {
                groupByHeroRole[d.HeroRole] = (groupByHeroRole[d.HeroRole] || 0) + 1;
            });

            var revisedData = Object.keys(groupByHeroRole).map(function (d) { return { value: groupByHeroRole[d], role: rolesArray[d] } });

            var arc = g.selectAll(".arc")
                .data(pie(revisedData))
                .enter().append("g")
                .attr("class", "arc");

            arc.append("path")
                .attr("d", path)
                .attr("fill", function (d) { return color(d.value); });

            arc.append("text")
                .attr("transform", function (d) { return "translate(" + label.centroid(d) + ")"; })
                .attr("dy", "0.35em")
                .text(function (d) { return d.data.role; });
        })
    })
</script>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@using (Html.BeginForm())
{
    <div>
        <div class="col-md-3 col-lg-3">Find by name: @Html.TextBox("SearchName")</div>
        <div class="col-md-3 col-lg-3">Find by Role:
        @Html.DropDownList("SearchRole",
           EnumHelper.GetSelectList(typeof(Ex2.Models.Role)),
           "Select hero role")</div>        
        <div class="col-md-3 col-lg-3">Find by HP:@Html.TextBox("SearchHp")</div>
        <input class="col-md-2 col-lg-2" type="submit" value="Search" />
    </div>
}

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.HeroRole)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.HP)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AttackStyle)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.HeroRole)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.HP)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.AttackStyle)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.HeroID }) |
            @Html.ActionLink("Details", "Details", new { id=item.HeroID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.HeroID })
        </td>
    </tr>
}

</table>

<br />
<b><u>Entire Statistics:</u></b>
<br />
<svg width="480" height="250"></svg>

